---
title: "BEE 4750/5750 Homework 0"
author: "Audrey Noziere (aln57)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
function square_number(x)
    square_number(x) = x * x
    return output
end
```
## Problem 1.2
```julia
square_number(x) = x * x
print("We can see that 6^2 =", square_number(6))
```
## Problem 1.3
```julia
square_number(x) = x * x
f(x) = square_number(x)
using Plots
plot(f, -10, 10, title = "Square Number Graph", xlabel = "range", ylabel = "X^2")
```
# Problem 2

## Problem 2.1
```julia 
print("We know that the sqrt of x will be smaller than x, 
hence we will guess a value for a that will
be smaller than x. Let x = 4 and a = 1. 
The square root of x = 2  and 4/1 = 4. 
Hence the square root will fall between 4 
and one. Even if we guess a = 3, x/a = 1.333  
and two falls in between. a = 4, the range 
will be between 4 and 1. This demonstrates 
that no matter what you choose for a the sqrt(x) 
will always fall in between the a and x/a range. ")
```
## Problem 2.2
```julia
function nwt_sq(x,a)        
  while abs(x/a - a) > 0.1    
    a = (x/a + a) / 2
  end
  return a
end
```
# Problem 3

## Problem 3.1
```julia
rand(20)
```
## Problem 3.2
# let x = rand(#) vector of desired length
```julia
function mean(x)
  a = 0 
  for i in x
   a = a + i 
  end 
  return a/20 
end

function demean(x)
  for i in 1:length(x)
    x[i] -= mean(x)
  end
  return x
end
```
## Problem 3.3
# 10 elements , center 6 are 1 others are equal to 0
```julia
vect = Vector{Float64}([0,0,1,1,1,1,1,1,0,0]) 
```
## Problem 3.4 
```julia
x = rand(Float64, (5,5))
demean(x)
```
# Problem 4
```julia
Pkg.add("Distributions")
using Distributions
```
## Problem 4.1
```julia
lognorm = LogNormal(log(0.03),0.005)
Yt = rand(lognorm, 100)
```
## Problem 4.2 
```julia
function simulation(a,Yt,b,q,T,Xo)
  xnew = []
  for i in 1:T
    push!(xnew, Xo) 
    Xt = Xo + a + Yt[i] + (Xo^q)/(1 + Xo^q) - b*Xo 
    Xo = Xt
  end
  return xnew
end


```
## Problem 4.3
```julia 
using Plots
simulation(0.4, Yt, 0.42, 2, 100, 3)
plot(1:100, simulation(0.4, Yt, 0.42, 2, 100, 3), title = "Simulation Eutrophication Graph", xlabel = "Time", ylabel = "Lake Level")
```

# References
#Here are the sources that helped me complete the hw. I also got help from Nimra in the class. And I went to OH with Professor Vivek
https://stackoverflow.com/questions/32985567/extract-rows-columns-of-a-matrix-into-separate-variables
https://docs.julialang.org/en/v1/stdlib/Random/
https://www.geeksforgeeks.org/functions-in-julia/
https://docs.julialang.org/en/v1/base/iterators/
https://www.geeksforgeeks.org/find-root-of-a-number-using-newtons-method/#:~:text=Let%20N%20be%20any%20number,correct%20square%20root%20of%20N.
https://stackoverflow.com/questions/24326876/generating-a-random-integer-in-range-in-julia
https://stackoverflow.com/questions/37539883/plotting-graph-using-for-loop-in-matlab
https://discourse.julialang.org/t/updating-values-via-iteration/39505
https://discourse.julialang.org/t/how-to-update-an-array-efficiently/28727
https://discourse.julialang.org/t/plot-inside-a-function/31297
